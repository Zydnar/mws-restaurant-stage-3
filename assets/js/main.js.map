{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["import {fetchCuisines, fetchNeighborhoods, updateRestaurants} from './main';\r\nimport {fetchRestaurantFromURL, fillBreadcrumb} from \"./restaurant_info\";\r\nimport DBHelper from \"./dbhelper\";\r\n\r\n(function () {\r\n    const neighborhoodsSelect = document.getElementById('neighborhoods-select'),\r\n        cuisinesSelect = document.getElementById('cuisines-select');\r\n\r\n    const routeChecker = () => {\r\n        const patt = /([\\w_.]+)/g;\r\n        return location.pathname.match(patt) || ['/'];\r\n    };\r\n    const sw_update_ready = function (worker) {\r\n        if (confirm('Update is ready. Refresh now?')) {\r\n            return worker.postMessage(\r\n                {\r\n                    action: 'skipWaiting'\r\n                }\r\n            );\r\n        }\r\n    };\r\n    const track_installing = (worker) => {\r\n        return worker.addEventListener('statechange', () => {\r\n            if (worker.state === 'installed') {\r\n                return sw_update_ready(worker);\r\n            }\r\n        });\r\n    };\r\n\r\n    const initSW = () => {\r\n        if (navigator.serviceWorker) {\r\n            navigator.serviceWorker.register('/sw.js').then((reg) => {\r\n                if (!navigator.serviceWorker.controller) {\r\n                    return;\r\n                } else if (reg.installing) {\r\n                    console.log('Service worker installing');\r\n                    track_installing(reg.installing);\r\n                } else if (reg.waiting) {\r\n                    console.log('Service worker installed');\r\n                } else if (reg.active) {\r\n                    console.log(`Service worker active at scope: ${reg.scope}`);\r\n                }\r\n                return reg.addEventListener('updatefound', () => {\r\n                    return track_installing(reg.installing);\r\n                });\r\n            }).catch(function (err) {\r\n                return console.error('ServiceWorker registration failed with error: ' + err);\r\n            });\r\n        }\r\n\r\n    };\r\n    const setInitMap = (type) => {\r\n        /**\r\n         * Initialize Google map, called from HTML.\r\n         * @return {function}\r\n         */\r\n        switch (type) {\r\n            case '/':\r\n                self.initMap = () => {\r\n                    let loc = {\r\n                        lat: 40.722216,\r\n                        lng: -73.987501\r\n                    };\r\n                    self.map = new google.maps.Map(document.getElementById('map'), {\r\n                        zoom: 12,\r\n                        center: loc,\r\n                        scrollwheel: false\r\n                    });\r\n                    updateRestaurants();\r\n                };\r\n                break;\r\n            case 'restaurant.html':\r\n                self.initMap = () => fetchRestaurantFromURL(\r\n                    (error, restaurant) => {\r\n                        if (error) { // Got an error!\r\n                            console.error(error);\r\n                        } else {\r\n                            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                                zoom: 16,\r\n                                center: restaurant.latlng,\r\n                                scrollwheel: false\r\n                            });\r\n                            fillBreadcrumb();\r\n                            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n                        }\r\n                    });\r\n                break;\r\n        }\r\n    };\r\n    switch (routeChecker()[0]) {\r\n        case '/':\r\n            setInitMap('/');\r\n            /**\r\n             * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n             */\r\n            document.addEventListener('DOMContentLoaded', () => {\r\n                fetchNeighborhoods();\r\n                fetchCuisines();\r\n            });\r\n\r\n            cuisinesSelect.addEventListener('change', (event) => {\r\n                updateRestaurants();\r\n            });\r\n            neighborhoodsSelect.addEventListener('change', (event) => {\r\n                updateRestaurants();\r\n            });\r\n            break;\r\n        case 'restaurant.html':\r\n            setInitMap('restaurant.html');\r\n            break;\r\n    }\r\n    initSW(); //init service worker\r\n}).call(this); //ensure application runs in right context\r\n"],"file":"main.js"}